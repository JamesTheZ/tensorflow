From 43aea3fe12e4243246d8f38e4844381c9193d517 Mon Sep 17 00:00:00 2001
From: "ZHENG,Zhen" <zzchman@gmail.com>
Date: Wed, 8 Dec 2021 20:39:06 +0800
Subject: [PATCH] [llvm][nvptx] Fix error GVN on shared memory load.

---
 llvm/lib/Transforms/Scalar/GVN.cpp | 53 ++++++++++++++++++++++++++++++
 1 file changed, 53 insertions(+)

diff --git a/llvm/lib/Transforms/Scalar/GVN.cpp b/llvm/lib/Transforms/Scalar/GVN.cpp
index 16368aec7c3f..d2f54dca486a 100644
--- a/llvm/lib/Transforms/Scalar/GVN.cpp
+++ b/llvm/lib/Transforms/Scalar/GVN.cpp
@@ -1002,6 +1002,40 @@ static void reportMayClobberedLoad(LoadInst *Load, MemDepResult DepInfo,
   ORE->emit(R);
 }
 
+/// Get instructions between two given instructions.
+static void collectInstructionsInBetween(
+    Instruction *StartInst, const Instruction *EndInst,
+    llvm::SmallPtrSetImpl<Instruction *> &InBetweenInsts) {
+  assert(InBetweenInsts.empty() && "Expecting InBetweenInsts to be empty");
+
+  /// Get the next instructions of \p I, and push them to \p WorkList.
+  auto getNextInsts = [](Instruction *I,
+                         llvm::SmallPtrSetImpl<Instruction *> &WorkList) {
+    if (Instruction *NextInst = I->getNextNode())
+      WorkList.insert(NextInst);
+    else {
+      assert(I->isTerminator() && "Expecting a terminator instruction");
+      for (BasicBlock *Succ : successors(I))
+        WorkList.insert(&Succ->front());
+    }
+  };
+
+  llvm::SmallPtrSet<Instruction *, 10> WorkList;
+  getNextInsts(StartInst, WorkList);
+  while (!WorkList.empty()) {
+    Instruction *CurInst = *WorkList.begin();
+    WorkList.erase(CurInst);
+
+    if (CurInst == EndInst)
+      continue;
+
+    if (!InBetweenInsts.insert(CurInst).second)
+      continue;
+
+    getNextInsts(CurInst, WorkList);
+  }
+}
+
 bool GVN::AnalyzeLoadAvailability(LoadInst *Load, MemDepResult DepInfo,
                                   Value *Address, AvailableValue &Res) {
   assert((DepInfo.isDef() || DepInfo.isClobber()) &&
@@ -1011,6 +1045,25 @@ bool GVN::AnalyzeLoadAvailability(LoadInst *Load, MemDepResult DepInfo,
   const DataLayout &DL = Load->getModule()->getDataLayout();
 
   Instruction *DepInst = DepInfo.getInst();
+  // Deal with shared memory load of nvptx. Cannot forward if there is a call
+  // between the two instructions.
+  const std::string &TT = Load->getModule()->getTargetTriple();
+  if ((TT.find("nvptx") != std::string::npos) &&
+      (Load->getPointerAddressSpace() == 3)) {
+    if (dyn_cast<StoreInst>(DepInst) || dyn_cast<LoadInst>(DepInst)) {
+      SmallPtrSet<Instruction *, 10> InBetweenInsts;
+      collectInstructionsInBetween(DepInst, Load, InBetweenInsts);
+      for (auto Inst : InBetweenInsts) {
+        if (CallInst *CallI = dyn_cast<CallInst>(Inst)) {
+          // Thread-block level barrier may be called directly or indirectly.
+          // e.g. direct call:
+          //     call void @llvm.nvvm.barrier0()
+          return false;
+        }
+      }
+    }
+  }
+
   if (DepInfo.isClobber()) {
     // If the dependence is to a store that writes to a superset of the bits
     // read by the load, we can extract the bits we need for the load from the
-- 
2.24.3 (Apple Git-128)

